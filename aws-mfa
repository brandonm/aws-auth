#!/usr/bin/env bash
#
# Script to login using MFA to AWS based on secrets stored in pass
#

set -e

getSessionToken() {
  export AWS_ACCESS_KEY_ID=$(pass ${alias}/aws-access-key-id)
  export AWS_SECRET_ACCESS_KEY=$(pass ${alias}/aws-access-secret)

  mfaSerialNumber=$(pass ${alias}/aws-mfa-arn)

  if [[ ! -z $mfaSerialNumber || ! -z $token ]]; then
    awsSessionToken=$(aws sts get-session-token --serial-number $mfaSerialNumber --token-code $token)
  fi
}

if [[ -z $1 || -z $2 ]]; then
  printf "%s\n" "Usage: eval \$(${0##*/} <name> <token>)" >&2
  printf "%s\n" "" >&2
  printf "%s\n" " The scripts expects tho following secrets are stored in the password store pass:" >&2
  printf "%s\n" "  - <alias>/aws-access-key-id - AWS access key to obtain session token." >&2
  printf "%s\n" "  - <alias>/aws-access-secret - AWS secret to obtain session token." >&2
  printf "%s\n" "  - <alias>/aws-mfa-arn - AWS MFA arn for two factor login." >&2
  exit 1
fi

unset AWS_SESSION_TOKEN
alias=$1
token=$2

getSessionToken


# Generate shell output
if [[ ! -z $awsSessionToken ]]; then
  expire=$(echo $awsSessionToken | jq -r '.Credentials.Expiration')

  echo export AWS_SESSION_TOKEN=$(echo $awsSessionToken | jq -r '.Credentials.SessionToken')
  echo export AWS_SECRET_ACCESS_KEY=$(echo $awsSessionToken | jq -r '.Credentials.SecretAccessKey')
  echo export AWS_ACCESS_KEY_ID=$(echo $awsSessionToken | jq -r '.Credentials.AccessKeyId')
  echo Keys valid until $expire >&2
else
  echo WARNING: Could not option session token >&2
fi


